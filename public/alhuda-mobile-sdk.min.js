(function () {
  const sdk = document.currentScript;
  if (!sdk) return console.warn("[Alhuda SDK] ❌ SDK script not found");

  const key = sdk.getAttribute("data-key");
  const formatAttr = (sdk.getAttribute("data-format") || "banner").toLowerCase();
  const containerAttr = sdk.getAttribute("data-container");
  const sdkBase = sdk.getAttribute("data-base") || window.location.origin;
  const origin = "mobile";

  if (!key || !containerAttr) {
    return console.warn("[Alhuda SDK] ❌ Missing data-key or data-container attribute");
  }

  const formats = formatAttr === "both" ? ["banner", "box"] : [formatAttr];
  const containerIds = containerAttr.split(",").map((id) => id.trim()).filter(Boolean);

  const normalize = (str) =>
    (str || "").toLowerCase().replace(/^https?:\/\//, "").replace(/^www\./, "").replace(/\/$/, "");

  const post = async (url, data) => {
    if (!data.ad_id || !data.source_id) {
      return console.warn("[Alhuda SDK] ⚠️ Missing ad_id or source_id");
    }

    try {
      await fetch(url, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-Alhuda-Origin": origin,
        },
        credentials: "include",
        body: JSON.stringify(data),
      });
    } catch (err) {
      console.warn("[Alhuda SDK] ❌ Tracking error:", err.message);
    }
  };

  const showMsg = (el, msg, color = "#999") => {
    if (!el) return;
    el.innerHTML = `<div style="padding:10px;text-align:center;color:${color};font-size:13px;font-family:sans-serif">${msg}</div>`;
  };

  const showAd = (el, ad, format) => {
    if (!ad || ad.fallback || !ad.media) {
      return showMsg(el, "⚠️ No ad available", "#aaa");
    }

    const expected = normalize(ad.expected_domain);
    if (expected && expected !== normalize(origin)) {
      return showMsg(el, "⛔ Unauthorized domain", "#c00");
    }

    const payload = { ad_id: ad.ad_id, source_id: ad.source_id };

    const wrap = document.createElement("div");
    Object.assign(wrap.style, {
      width: format === "box" ? "300px" : "100%",
      maxWidth: "100%",
      borderRadius: "10px",
      overflow: "hidden",
      background: "#fff",
      boxShadow: "0 2px 6px rgba(0,0,0,0.1)",
    });

    const a = document.createElement("a");
    a.href = ad.target_url || "#";
    a.target = "_blank";
    a.rel = "noopener noreferrer";

    if (ad.media.endsWith(".mp4")) {
      const video = document.createElement("video");
      Object.assign(video, {
        src: ad.media,
        autoplay: true,
        muted: true,
        loop: true,
        playsInline: true,
      });
      Object.assign(video.style, {
        width: "100%",
        display: "block",
        borderRadius: "10px",
      });
      a.appendChild(video);
    } else {
      const img = document.createElement("img");
      Object.assign(img, {
        src: ad.media,
        alt: ad.title || "Ad",
        loading: "lazy",
      });
      Object.assign(img.style, {
        width: "100%",
        display: "block",
        borderRadius: "10px",
      });
      a.appendChild(img);
    }

    a.onclick = () => post(`${sdkBase}/api/click`, payload);
    wrap.appendChild(a);
    el.innerHTML = "";
    el.appendChild(wrap);

    if ("IntersectionObserver" in window) {
      const observer = new IntersectionObserver(
        (entries) => {
          if (entries.some((e) => e.isIntersecting)) {
            post(`${sdkBase}/api/view`, payload);
            observer.disconnect();
          }
        },
        { threshold: 0.5 }
      );
      observer.observe(wrap);
    } else {
      setTimeout(() => post(`${sdkBase}/api/view`, payload), 2000);
    }
  };

  const fetchAd = (format, el) => {
    if (!el) return;
    showMsg(el, "⏳ Loading...");
    fetch(`${sdkBase}/api/ad?key=${key}&format=${format}`, {
      headers: { "X-Alhuda-Origin": origin },
      credentials: "include",
    })
      .then((res) => {
        if (!res.ok) throw new Error(`Status ${res.status}`);
        return res.json();
      })
      .then((data) => showAd(el, data, format))
      .catch((err) => {
        console.warn("[Alhuda SDK] ❌ Ad fetch failed:", err.message);
        showMsg(el, "❌ Failed to load ad", "#b00");
      });
  };

  formats.forEach((format) => {
    containerIds.forEach((id) => {
      const el = document.getElementById(id) || document.getElementById(`${id}-${format}`);
      if (el) {
        fetchAd(format, el);
      } else {
        console.warn(`[Alhuda SDK] ⚠️ Missing container: ${id}`);
      }
    });
  });
})();
